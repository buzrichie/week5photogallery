name: Build and Push to Amazon ECR

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout source
      - name: Checkout source
        uses: actions/checkout@v4

      # 2. Configure AWS credentials (OIDC)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: eu-central-1

      # 3. Log in to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Build and Push Docker image
      - name: Build and Push Docker image
        run: |
          ECR_REPO_URI=${{ secrets.ECR_REPOSITORY_URI }}
          IMAGE_TAG=latest
          IMAGE_URI=$ECR_REPO_URI:$IMAGE_TAG

          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

          # Build image
          docker build -t $IMAGE_URI .

          # Push image
          docker push $IMAGE_URI

      # 5. Inject variables into taskdef.json
      - name: Render Task Definition
        run: |
          sed -e "s|<IMAGE_URI>|${IMAGE_URI}|g" \
              -e "s|<S3_BUCKET_NAME>|${{ secrets.S3_BUCKET_NAME }}|g" \
              -e "s|<SECRETS_MANAGER_ARN>|${{ secrets.SECRETS_MANAGER_ARN }}|g" \
              taskdef.json > taskdef-rendered.json
          mv taskdef-rendered.json taskdef.json

      # 6. Package deployment templates
      - name: Package Deployment Templates
        run: |
          zip deployment-templates.zip taskdef.json appspec.yml

      # 7. Upload templates zip to S3
      - name: Upload Deployment Templates
        run: |
          aws s3 cp deployment-templates.zip s3://${{ secrets.ARTIFACT_BUCKET }}/deployment-templates.zip
